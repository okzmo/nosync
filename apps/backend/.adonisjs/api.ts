/* eslint-disable */
// --------------------------------------------------
// This file is auto-generated by Tuyau. Do not edit manually !
// --------------------------------------------------

import type { MakeTuyauRequest, MakeTuyauResponse } from '@tuyau/utils/types'
import type { InferInput } from '@vinejs/vine/types'

type V1AuthRegisterPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/user/usecases/Register/validator.ts')['registerValidator']>>
  response: MakeTuyauResponse<import('../app/user/usecases/Register/controller.ts').default['handle'], true>
}
type V1AuthLoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/user/usecases/Login/validator.ts')['loginValidator']>>
  response: MakeTuyauResponse<import('../app/user/usecases/Login/controller.ts').default['handle'], true>
}
type V1AuthValidGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/user/usecases/CheckUser/controller.ts').default['handle'], false>
}
type V1AuthLogoutPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/user/usecases/Logout/controller.ts').default['handle'], false>
}
type V1AuthEmailVerifyIdPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/user/usecases/VerifyEmail/controller.ts').default['handle'], false>
}
type V1AuthEmailChangePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/user/usecases/ChangeEmail/validator.ts')['changeEmailValidator']>>
  response: MakeTuyauResponse<import('../app/user/usecases/ChangeEmail/controller.ts').default['handle'], true>
}
type V1AuthChecktokenPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/user/usecases/ResetPassword/validator.ts')['checkToken']>>
  response: MakeTuyauResponse<import('../app/user/usecases/ResetPassword/controller.ts').default['checkToken'], true>
}
type V1AuthPasswordResetPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/user/usecases/ResetPassword/validator.ts')['resetPasswordSendValidator']>>
  response: MakeTuyauResponse<import('../app/user/usecases/ResetPassword/controller.ts').default['send'], true>
}
type V1AuthPasswordResetwithcurrentPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/user/usecases/ResetPasswordWithCurrent/validator.ts')['resetPasswordValidator']>>
  response: MakeTuyauResponse<import('../app/user/usecases/ResetPasswordWithCurrent/controller.ts').default['handle'], true>
}
type V1AuthRecoveryPasswordIdPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/user/usecases/ResetPassword/validator.ts')['resetPasswordValidator']>>
  response: MakeTuyauResponse<import('../app/user/usecases/ResetPassword/controller.ts').default['handle'], true>
}
type V1CellSavetitlePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/cell/usecases/SaveTitle/validator.ts')['saveTitleValidator']>>
  response: MakeTuyauResponse<import('../app/cell/usecases/SaveTitle/controller.ts').default['handle'], true>
}
type V1CellSavecontentPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/cell/usecases/SaveContent/validator.ts')['saveContentValidator']>>
  response: MakeTuyauResponse<import('../app/cell/usecases/SaveContent/controller.ts').default['handle'], true>
}
type V1CellCreatenotePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/cell/usecases/CreateNote/validator.ts')['createNoteValidator']>>
  response: MakeTuyauResponse<import('../app/cell/usecases/CreateNote/controller.ts').default['handle'], true>
}
type V1CellDeletecellDelete = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/cell/usecases/DeleteCell/validator.ts')['deleteCellValidator']>>
  response: MakeTuyauResponse<import('../app/cell/usecases/DeleteCell/controller.ts').default['handle'], true>
}
type V1CellMovecellPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/cell/usecases/MoveCell/validator.ts')['moveCellValidator']>>
  response: MakeTuyauResponse<import('../app/cell/usecases/MoveCell/controller.ts').default['handle'], true>
}
type V1BranchCellsIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/branch/usecases/GetCells/controller.ts').default['handle'], false>
}
type V1BranchSearchcellsPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/branch/usecases/SearchCells/validator.ts')['searchCellsValidator']>>
  response: MakeTuyauResponse<import('../app/branch/usecases/SearchCells/controller.ts').default['handle'], true>
}
type V1BranchUploadPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/branch/usecases/UploadMedia/validators.ts')['uploadMediaValidator']>>
  response: MakeTuyauResponse<import('../app/branch/usecases/UploadMedia/controller.ts').default['handle'], true>
}
type V1BranchCreatePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/branch/usecases/CreateBranch/validator.ts')['createBranchValidator']>>
  response: MakeTuyauResponse<import('../app/branch/usecases/CreateBranch/controller.ts').default['handle'], true>
}
type V1BranchRenamePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/branch/usecases/RenameBranch/validator.ts')['renameBranchValidator']>>
  response: MakeTuyauResponse<import('../app/branch/usecases/RenameBranch/controller.ts').default['handle'], true>
}
type V1BranchDeletePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/branch/usecases/DeleteBranch/validator.ts')['deleteBranchValidator']>>
  response: MakeTuyauResponse<import('../app/branch/usecases/DeleteBranch/controller.ts').default['handle'], true>
}
type V1BranchExtensionAddPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/branch/usecases/AddMediaFromExtension/validators.ts')['addMediaFromExtensionValidator']>>
  response: MakeTuyauResponse<import('../app/branch/usecases/AddMediaFromExtension/controller.ts').default['handle'], true>
}
type V1SpaceCreatePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/space/usecases/CreateSpace/validator.ts')['createSpaceValidator']>>
  response: MakeTuyauResponse<import('../app/space/usecases/CreateSpace/controller.ts').default['handle'], true>
}
type V1SpaceRenamePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/space/usecases/RenameSpace/validator.ts')['renameSpaceValidator']>>
  response: MakeTuyauResponse<import('../app/space/usecases/RenameSpace/controller.ts').default['handle'], true>
}
type V1SpaceDeletePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/space/usecases/DeleteSpace/validator.ts')['deleteSpaceValidator']>>
  response: MakeTuyauResponse<import('../app/space/usecases/DeleteSpace/controller.ts').default['handle'], true>
}
export interface ApiDefinition {
  'v1': {
    'auth': {
      'register': {
        '$url': {
        };
        '$post': V1AuthRegisterPost;
      };
      'login': {
        '$url': {
        };
        '$post': V1AuthLoginPost;
      };
      'valid': {
        '$url': {
        };
        '$get': V1AuthValidGetHead;
        '$head': V1AuthValidGetHead;
      };
      'logout': {
        '$url': {
        };
        '$post': V1AuthLogoutPost;
      };
      'email': {
        'verify': {
          ':token': {
            '$url': {
            };
            '$post': V1AuthEmailVerifyIdPost;
          };
        };
        'change': {
          '$url': {
          };
          '$post': V1AuthEmailChangePost;
        };
      };
      'check_token': {
        '$url': {
        };
        '$post': V1AuthChecktokenPost;
      };
      'password': {
        'reset': {
          '$url': {
          };
          '$post': V1AuthPasswordResetPost;
        };
        'reset_with_current': {
          '$url': {
          };
          '$post': V1AuthPasswordResetwithcurrentPost;
        };
      };
      'recovery': {
        'password': {
          ':token': {
            '$url': {
            };
            '$post': V1AuthRecoveryPasswordIdPost;
          };
        };
      };
    };
    'cell': {
      'save_title': {
        '$url': {
        };
        '$post': V1CellSavetitlePost;
      };
      'save_content': {
        '$url': {
        };
        '$post': V1CellSavecontentPost;
      };
      'create_note': {
        '$url': {
        };
        '$post': V1CellCreatenotePost;
      };
      'delete_cell': {
        '$url': {
        };
        '$delete': V1CellDeletecellDelete;
      };
      'move_cell': {
        '$url': {
        };
        '$post': V1CellMovecellPost;
      };
    };
    'branch': {
      'cells': {
        ':branchId': {
          '$url': {
          };
          '$get': V1BranchCellsIdGetHead;
          '$head': V1BranchCellsIdGetHead;
        };
      };
      'search_cells': {
        '$url': {
        };
        '$post': V1BranchSearchcellsPost;
      };
      'upload': {
        '$url': {
        };
        '$post': V1BranchUploadPost;
      };
      'create': {
        '$url': {
        };
        '$post': V1BranchCreatePost;
      };
      'rename': {
        '$url': {
        };
        '$post': V1BranchRenamePost;
      };
      'delete': {
        '$url': {
        };
        '$post': V1BranchDeletePost;
      };
      'extension': {
        'add': {
          '$url': {
          };
          '$post': V1BranchExtensionAddPost;
        };
      };
    };
    'space': {
      'create': {
        '$url': {
        };
        '$post': V1SpaceCreatePost;
      };
      'rename': {
        '$url': {
        };
        '$post': V1SpaceRenamePost;
      };
      'delete': {
        '$url': {
        };
        '$post': V1SpaceDeletePost;
      };
    };
  };
}
const routes = [
  {
    params: [],
    name: 'register',
    path: '/v1/auth/register',
    method: ["POST"],
    types: {} as V1AuthRegisterPost,
  },
  {
    params: [],
    name: 'login',
    path: '/v1/auth/login',
    method: ["POST"],
    types: {} as V1AuthLoginPost,
  },
  {
    params: [],
    name: 'check.user',
    path: '/v1/auth/valid',
    method: ["GET","HEAD"],
    types: {} as V1AuthValidGetHead,
  },
  {
    params: [],
    name: 'logout',
    path: '/v1/auth/logout',
    method: ["POST"],
    types: {} as V1AuthLogoutPost,
  },
  {
    params: ["token"],
    name: 'verifyEmail',
    path: '/v1/auth/email/verify/:token',
    method: ["POST"],
    types: {} as V1AuthEmailVerifyIdPost,
  },
  {
    params: [],
    name: 'changeEmail',
    path: '/v1/auth/email/change',
    method: ["POST"],
    types: {} as V1AuthEmailChangePost,
  },
  {
    params: [],
    name: 'checkToken',
    path: '/v1/auth/check_token',
    method: ["POST"],
    types: {} as V1AuthChecktokenPost,
  },
  {
    params: [],
    name: 'passwordReset',
    path: '/v1/auth/password/reset',
    method: ["POST"],
    types: {} as V1AuthPasswordResetPost,
  },
  {
    params: [],
    name: 'recovery.password_with_current',
    path: '/v1/auth/password/reset_with_current',
    method: ["POST"],
    types: {} as V1AuthPasswordResetwithcurrentPost,
  },
  {
    params: ["token"],
    name: 'recovery.password',
    path: '/v1/auth/recovery/password/:token',
    method: ["POST"],
    types: {} as V1AuthRecoveryPasswordIdPost,
  },
  {
    params: [],
    name: 'branch.save.title',
    path: '/v1/cell/save_title',
    method: ["POST"],
    types: {} as V1CellSavetitlePost,
  },
  {
    params: [],
    name: 'branch.save.content',
    path: '/v1/cell/save_content',
    method: ["POST"],
    types: {} as V1CellSavecontentPost,
  },
  {
    params: [],
    name: 'branch.create.note',
    path: '/v1/cell/create_note',
    method: ["POST"],
    types: {} as V1CellCreatenotePost,
  },
  {
    params: [],
    name: 'branch.delete.cell',
    path: '/v1/cell/delete_cell',
    method: ["DELETE"],
    types: {} as V1CellDeletecellDelete,
  },
  {
    params: [],
    name: 'branch.move.cell',
    path: '/v1/cell/move_cell',
    method: ["POST"],
    types: {} as V1CellMovecellPost,
  },
  {
    params: ["branchId"],
    name: 'branch.getCells',
    path: '/v1/branch/cells/:branchId',
    method: ["GET","HEAD"],
    types: {} as V1BranchCellsIdGetHead,
  },
  {
    params: [],
    name: 'branch.searchCells',
    path: '/v1/branch/search_cells',
    method: ["POST"],
    types: {} as V1BranchSearchcellsPost,
  },
  {
    params: [],
    name: 'branch.uploadMedia',
    path: '/v1/branch/upload',
    method: ["POST"],
    types: {} as V1BranchUploadPost,
  },
  {
    params: [],
    name: 'branch.create',
    path: '/v1/branch/create',
    method: ["POST"],
    types: {} as V1BranchCreatePost,
  },
  {
    params: [],
    name: 'branch.rename',
    path: '/v1/branch/rename',
    method: ["POST"],
    types: {} as V1BranchRenamePost,
  },
  {
    params: [],
    name: 'branch.delete',
    path: '/v1/branch/delete',
    method: ["POST"],
    types: {} as V1BranchDeletePost,
  },
  {
    params: [],
    name: 'branch.addMediaFromExtension',
    path: '/v1/branch/extension/add',
    method: ["POST"],
    types: {} as V1BranchExtensionAddPost,
  },
  {
    params: [],
    name: 'space.create',
    path: '/v1/space/create',
    method: ["POST"],
    types: {} as V1SpaceCreatePost,
  },
  {
    params: [],
    name: 'space.rename',
    path: '/v1/space/rename',
    method: ["POST"],
    types: {} as V1SpaceRenamePost,
  },
  {
    params: [],
    name: 'space.delete',
    path: '/v1/space/delete',
    method: ["POST"],
    types: {} as V1SpaceDeletePost,
  },
] as const;
export const api = {
  routes,
  definition: {} as ApiDefinition
}
